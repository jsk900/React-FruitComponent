{"ast":null,"code":"var _jsxFileName = \"/home/dci-l128/projects/javascript/react/beginning/React-FruitComponent/fruits/src/components/ColourButton.js\";\nimport React, { Component } from 'react'; // Button class component accepting props from our Fruit component.App.\n// Here we set up state as the name of the button and the colour of the button.\n// We set up binding for our click handler.\n\nexport class ColourButton extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: this.props.name,\n      colour: this.props.colour\n    };\n    this.handleClick = this.handleClick.bind(this);\n  } //This function returns a random number\n\n\n  getRandomIntInclusive(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    let number = Math.floor(Math.random() * (max - min + 1)) + min;\n    return number;\n  } // The click handler calls our random number generator which will give us\n  // our random colour to change the state with setState.\n\n\n  handleClick() {\n    const coloursArr = ['#330000', '#660000', '#ff0000', '#ff8000', '#ffb266', '#b2ff66', '#ff66b2', '#c0c0c0', '#404040', '#ff007f', '#3399ff', '#006600', '#cccc00'];\n    let result = this.getRandomIntInclusive(0, 12);\n    this.setState(() => ({\n      colour: coloursArr[result]\n    }));\n  }\n\n  render() {\n    return React.createElement(\"button\", {\n      className: \"colourButton\",\n      onClick: this.handleClick,\n      style: {\n        backgroundColor: this.state.colour\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, this.state.name);\n  }\n\n}","map":{"version":3,"sources":["/home/dci-l128/projects/javascript/react/beginning/React-FruitComponent/fruits/src/components/ColourButton.js"],"names":["React","Component","ColourButton","constructor","props","state","name","colour","handleClick","bind","getRandomIntInclusive","min","max","Math","ceil","floor","number","random","coloursArr","result","setState","render","backgroundColor"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CAEA;AACA;AACA;;AACA,OAAO,MAAMC,YAAN,SAA2BD,SAA3B,CAAqC;AAC1CE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,KAAKF,KAAL,CAAWE,IADN;AAEXC,MAAAA,MAAM,EAAE,KAAKH,KAAL,CAAWG;AAFR,KAAb;AAKA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACD,GAVyC,CAY1C;;;AACAC,EAAAA,qBAAqB,CAACC,GAAD,EAAMC,GAAN,EAAW;AAC9BD,IAAAA,GAAG,GAAGE,IAAI,CAACC,IAAL,CAAUH,GAAV,CAAN;AACAC,IAAAA,GAAG,GAAGC,IAAI,CAACE,KAAL,CAAWH,GAAX,CAAN;AACA,QAAII,MAAM,GAAGH,IAAI,CAACE,KAAL,CAAWF,IAAI,CAACI,MAAL,MAAiBL,GAAG,GAAGD,GAAN,GAAY,CAA7B,CAAX,IAA8CA,GAA3D;AACA,WAAOK,MAAP;AACD,GAlByC,CAoB1C;AACA;;;AACAR,EAAAA,WAAW,GAAG;AACZ,UAAMU,UAAU,GAAG,CACjB,SADiB,EAEjB,SAFiB,EAGjB,SAHiB,EAIjB,SAJiB,EAKjB,SALiB,EAMjB,SANiB,EAOjB,SAPiB,EAQjB,SARiB,EASjB,SATiB,EAUjB,SAViB,EAWjB,SAXiB,EAYjB,SAZiB,EAajB,SAbiB,CAAnB;AAeA,QAAIC,MAAM,GAAG,KAAKT,qBAAL,CAA2B,CAA3B,EAA8B,EAA9B,CAAb;AACA,SAAKU,QAAL,CAAc,OAAO;AACnBb,MAAAA,MAAM,EAAEW,UAAU,CAACC,MAAD;AADC,KAAP,CAAd;AAGD;;AAEDE,EAAAA,MAAM,GAAG;AACP,WACE;AACE,MAAA,SAAS,EAAC,cADZ;AAEE,MAAA,OAAO,EAAE,KAAKb,WAFhB;AAGE,MAAA,KAAK,EAAE;AAAEc,QAAAA,eAAe,EAAE,KAAKjB,KAAL,CAAWE;AAA9B,OAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKG,KAAKF,KAAL,CAAWC,IALd,CADF;AASD;;AAtDyC","sourcesContent":["import React, { Component } from 'react';\n\n// Button class component accepting props from our Fruit component.App.\n// Here we set up state as the name of the button and the colour of the button.\n// We set up binding for our click handler.\nexport class ColourButton extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      name: this.props.name,\n      colour: this.props.colour\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  //This function returns a random number\n  getRandomIntInclusive(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    let number = Math.floor(Math.random() * (max - min + 1)) + min;\n    return number;\n  }\n\n  // The click handler calls our random number generator which will give us\n  // our random colour to change the state with setState.\n  handleClick() {\n    const coloursArr = [\n      '#330000',\n      '#660000',\n      '#ff0000',\n      '#ff8000',\n      '#ffb266',\n      '#b2ff66',\n      '#ff66b2',\n      '#c0c0c0',\n      '#404040',\n      '#ff007f',\n      '#3399ff',\n      '#006600',\n      '#cccc00'\n    ];\n    let result = this.getRandomIntInclusive(0, 12);\n    this.setState(() => ({\n      colour: coloursArr[result]\n    }));\n  }\n\n  render() {\n    return (\n      <button\n        className=\"colourButton\"\n        onClick={this.handleClick}\n        style={{ backgroundColor: this.state.colour }}\n      >\n        {this.state.name}\n      </button>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}